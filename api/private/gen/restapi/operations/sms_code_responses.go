// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/NeuronGroup/account/api/private/gen/models"
)

// SmsCodeOKCode is the HTTP code returned for type SmsCodeOK
const SmsCodeOKCode int = 200

/*SmsCodeOK ok

swagger:response smsCodeOK
*/
type SmsCodeOK struct {
}

// NewSmsCodeOK creates SmsCodeOK with default headers values
func NewSmsCodeOK() *SmsCodeOK {
	return &SmsCodeOK{}
}

// WriteResponse to the client
func (o *SmsCodeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
}

/*SmsCodeDefault Error response

swagger:response smsCodeDefault
*/
type SmsCodeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.SmsCodeDefaultBody `json:"body,omitempty"`
}

// NewSmsCodeDefault creates SmsCodeDefault with default headers values
func NewSmsCodeDefault(code int) *SmsCodeDefault {
	if code <= 0 {
		code = 500
	}

	return &SmsCodeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the sms code default response
func (o *SmsCodeDefault) WithStatusCode(code int) *SmsCodeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the sms code default response
func (o *SmsCodeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the sms code default response
func (o *SmsCodeDefault) WithPayload(payload *models.SmsCodeDefaultBody) *SmsCodeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the sms code default response
func (o *SmsCodeDefault) SetPayload(payload *models.SmsCodeDefaultBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *SmsCodeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
