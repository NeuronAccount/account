// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSmsCodeParams creates a new SmsCodeParams object
// with the default values initialized.
func NewSmsCodeParams() SmsCodeParams {
	var ()
	return SmsCodeParams{}
}

// SmsCodeParams contains all the bound params for the sms code operation
// typically these are obtained from a http.Request
//
// swagger:parameters SmsCode
type SmsCodeParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*
	  In: query
	*/
	CaptchaCode *string
	/*
	  In: query
	*/
	CaptchaID *string
	/*
	  Required: true
	  In: query
	*/
	Phone string
	/*
	  Required: true
	  In: query
	*/
	Scene string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *SmsCodeParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCaptchaCode, qhkCaptchaCode, _ := qs.GetOK("captchaCode")
	if err := o.bindCaptchaCode(qCaptchaCode, qhkCaptchaCode, route.Formats); err != nil {
		res = append(res, err)
	}

	qCaptchaID, qhkCaptchaID, _ := qs.GetOK("captchaId")
	if err := o.bindCaptchaID(qCaptchaID, qhkCaptchaID, route.Formats); err != nil {
		res = append(res, err)
	}

	qPhone, qhkPhone, _ := qs.GetOK("phone")
	if err := o.bindPhone(qPhone, qhkPhone, route.Formats); err != nil {
		res = append(res, err)
	}

	qScene, qhkScene, _ := qs.GetOK("scene")
	if err := o.bindScene(qScene, qhkScene, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SmsCodeParams) bindCaptchaCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CaptchaCode = &raw

	return nil
}

func (o *SmsCodeParams) bindCaptchaID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	o.CaptchaID = &raw

	return nil
}

func (o *SmsCodeParams) bindPhone(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("phone", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("phone", "query", raw); err != nil {
		return err
	}

	o.Phone = raw

	return nil
}

func (o *SmsCodeParams) bindScene(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("scene", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("scene", "query", raw); err != nil {
		return err
	}

	o.Scene = raw

	return nil
}
