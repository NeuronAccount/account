// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronGroup/Account/api/private/gen/models"
)

// NewSmsSignupParams creates a new SmsSignupParams object
// with the default values initialized.
func NewSmsSignupParams() *SmsSignupParams {
	var ()
	return &SmsSignupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSmsSignupParamsWithTimeout creates a new SmsSignupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSmsSignupParamsWithTimeout(timeout time.Duration) *SmsSignupParams {
	var ()
	return &SmsSignupParams{

		timeout: timeout,
	}
}

// NewSmsSignupParamsWithContext creates a new SmsSignupParams object
// with the default values initialized, and the ability to set a context for a request
func NewSmsSignupParamsWithContext(ctx context.Context) *SmsSignupParams {
	var ()
	return &SmsSignupParams{

		Context: ctx,
	}
}

// NewSmsSignupParamsWithHTTPClient creates a new SmsSignupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSmsSignupParamsWithHTTPClient(client *http.Client) *SmsSignupParams {
	var ()
	return &SmsSignupParams{
		HTTPClient: client,
	}
}

/*SmsSignupParams contains all the parameters to send to the API endpoint
for the sms signup operation typically these are written to a http.Request
*/
type SmsSignupParams struct {

	/*Oauth2AuthorizeParams*/
	Oauth2AuthorizeParams *models.OAuth2AuthorizeParams
	/*Password*/
	Password string
	/*Phone*/
	Phone string
	/*SmsCode*/
	SmsCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the sms signup params
func (o *SmsSignupParams) WithTimeout(timeout time.Duration) *SmsSignupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sms signup params
func (o *SmsSignupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sms signup params
func (o *SmsSignupParams) WithContext(ctx context.Context) *SmsSignupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sms signup params
func (o *SmsSignupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sms signup params
func (o *SmsSignupParams) WithHTTPClient(client *http.Client) *SmsSignupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sms signup params
func (o *SmsSignupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOauth2AuthorizeParams adds the oauth2AuthorizeParams to the sms signup params
func (o *SmsSignupParams) WithOauth2AuthorizeParams(oauth2AuthorizeParams *models.OAuth2AuthorizeParams) *SmsSignupParams {
	o.SetOauth2AuthorizeParams(oauth2AuthorizeParams)
	return o
}

// SetOauth2AuthorizeParams adds the oauth2AuthorizeParams to the sms signup params
func (o *SmsSignupParams) SetOauth2AuthorizeParams(oauth2AuthorizeParams *models.OAuth2AuthorizeParams) {
	o.Oauth2AuthorizeParams = oauth2AuthorizeParams
}

// WithPassword adds the password to the sms signup params
func (o *SmsSignupParams) WithPassword(password string) *SmsSignupParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the sms signup params
func (o *SmsSignupParams) SetPassword(password string) {
	o.Password = password
}

// WithPhone adds the phone to the sms signup params
func (o *SmsSignupParams) WithPhone(phone string) *SmsSignupParams {
	o.SetPhone(phone)
	return o
}

// SetPhone adds the phone to the sms signup params
func (o *SmsSignupParams) SetPhone(phone string) {
	o.Phone = phone
}

// WithSmsCode adds the smsCode to the sms signup params
func (o *SmsSignupParams) WithSmsCode(smsCode string) *SmsSignupParams {
	o.SetSmsCode(smsCode)
	return o
}

// SetSmsCode adds the smsCode to the sms signup params
func (o *SmsSignupParams) SetSmsCode(smsCode string) {
	o.SmsCode = smsCode
}

// WriteToRequest writes these params to a swagger request
func (o *SmsSignupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Oauth2AuthorizeParams != nil {
		if err := r.SetBodyParam(o.Oauth2AuthorizeParams); err != nil {
			return err
		}
	}

	// query param password
	qrPassword := o.Password
	qPassword := qrPassword
	if qPassword != "" {
		if err := r.SetQueryParam("password", qPassword); err != nil {
			return err
		}
	}

	// query param phone
	qrPhone := o.Phone
	qPhone := qrPhone
	if qPhone != "" {
		if err := r.SetQueryParam("phone", qPhone); err != nil {
			return err
		}
	}

	// query param smsCode
	qrSmsCode := o.SmsCode
	qSmsCode := qrSmsCode
	if qSmsCode != "" {
		if err := r.SetQueryParam("smsCode", qSmsCode); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
