// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronGroup/Account/api/public/gen/models"
)

// TokenReader is a Reader for the Token structure.
type TokenReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TokenReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewTokenOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewTokenDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTokenOK creates a TokenOK with default headers values
func NewTokenOK() *TokenOK {
	return &TokenOK{}
}

/*TokenOK handles this case with default header values.

ok
*/
type TokenOK struct {
	Payload *models.TokenResponse
}

func (o *TokenOK) Error() string {
	return fmt.Sprintf("[GET /token][%d] tokenOK  %+v", 200, o.Payload)
}

func (o *TokenOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTokenDefault creates a TokenDefault with default headers values
func NewTokenDefault(code int) *TokenDefault {
	return &TokenDefault{
		_statusCode: code,
	}
}

/*TokenDefault handles this case with default header values.

Error response
*/
type TokenDefault struct {
	_statusCode int

	Payload *models.TokenDefaultBody
}

// Code gets the status code for the token default response
func (o *TokenDefault) Code() int {
	return o._statusCode
}

func (o *TokenDefault) Error() string {
	return fmt.Sprintf("[GET /token][%d] Token default  %+v", o._statusCode, o.Payload)
}

func (o *TokenDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TokenDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
