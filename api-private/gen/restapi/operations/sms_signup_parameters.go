// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSmsSignupParams creates a new SmsSignupParams object
// with the default values initialized.
func NewSmsSignupParams() SmsSignupParams {
	var ()
	return SmsSignupParams{}
}

// SmsSignupParams contains all the bound params for the sms signup operation
// typically these are obtained from a http.Request
//
// swagger:parameters SmsSignup
type SmsSignupParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	Password string
	/*
	  Required: true
	  In: query
	*/
	Phone string
	/*
	  Required: true
	  In: query
	*/
	SmsCode string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *SmsSignupParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qPassword, qhkPassword, _ := qs.GetOK("password")
	if err := o.bindPassword(qPassword, qhkPassword, route.Formats); err != nil {
		res = append(res, err)
	}

	qPhone, qhkPhone, _ := qs.GetOK("phone")
	if err := o.bindPhone(qPhone, qhkPhone, route.Formats); err != nil {
		res = append(res, err)
	}

	qSmsCode, qhkSmsCode, _ := qs.GetOK("smsCode")
	if err := o.bindSmsCode(qSmsCode, qhkSmsCode, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SmsSignupParams) bindPassword(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("password", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("password", "query", raw); err != nil {
		return err
	}

	o.Password = raw

	return nil
}

func (o *SmsSignupParams) bindPhone(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("phone", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("phone", "query", raw); err != nil {
		return err
	}

	o.Phone = raw

	return nil
}

func (o *SmsSignupParams) bindSmsCode(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("smsCode", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("smsCode", "query", raw); err != nil {
		return err
	}

	o.SmsCode = raw

	return nil
}
