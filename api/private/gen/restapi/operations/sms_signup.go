// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SmsSignupHandlerFunc turns a function with the right signature into a sms signup handler
type SmsSignupHandlerFunc func(SmsSignupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SmsSignupHandlerFunc) Handle(params SmsSignupParams) middleware.Responder {
	return fn(params)
}

// SmsSignupHandler interface for that can handle valid sms signup params
type SmsSignupHandler interface {
	Handle(SmsSignupParams) middleware.Responder
}

// NewSmsSignup creates a new http.Handler for the sms signup operation
func NewSmsSignup(ctx *middleware.Context, handler SmsSignupHandler) *SmsSignup {
	return &SmsSignup{Context: ctx, Handler: handler}
}

/*SmsSignup swagger:route POST /smsSignup smsSignup

sms signup

*/
type SmsSignup struct {
	Context *middleware.Context
	Handler SmsSignupHandler
}

func (o *SmsSignup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSmsSignupParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
