// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/NeuronGroup/Account/api/private/gen/models"
)

// NewLoginParams creates a new LoginParams object
// with the default values initialized.
func NewLoginParams() *LoginParams {
	var ()
	return &LoginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLoginParamsWithTimeout creates a new LoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLoginParamsWithTimeout(timeout time.Duration) *LoginParams {
	var ()
	return &LoginParams{

		timeout: timeout,
	}
}

// NewLoginParamsWithContext creates a new LoginParams object
// with the default values initialized, and the ability to set a context for a request
func NewLoginParamsWithContext(ctx context.Context) *LoginParams {
	var ()
	return &LoginParams{

		Context: ctx,
	}
}

// NewLoginParamsWithHTTPClient creates a new LoginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLoginParamsWithHTTPClient(client *http.Client) *LoginParams {
	var ()
	return &LoginParams{
		HTTPClient: client,
	}
}

/*LoginParams contains all the parameters to send to the API endpoint
for the login operation typically these are written to a http.Request
*/
type LoginParams struct {

	/*Name*/
	Name string
	/*Oauth2AuthorizeParams*/
	Oauth2AuthorizeParams *models.OAuth2AuthorizeParams
	/*Password*/
	Password string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the login params
func (o *LoginParams) WithTimeout(timeout time.Duration) *LoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the login params
func (o *LoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the login params
func (o *LoginParams) WithContext(ctx context.Context) *LoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the login params
func (o *LoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the login params
func (o *LoginParams) WithHTTPClient(client *http.Client) *LoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the login params
func (o *LoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the login params
func (o *LoginParams) WithName(name string) *LoginParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the login params
func (o *LoginParams) SetName(name string) {
	o.Name = name
}

// WithOauth2AuthorizeParams adds the oauth2AuthorizeParams to the login params
func (o *LoginParams) WithOauth2AuthorizeParams(oauth2AuthorizeParams *models.OAuth2AuthorizeParams) *LoginParams {
	o.SetOauth2AuthorizeParams(oauth2AuthorizeParams)
	return o
}

// SetOauth2AuthorizeParams adds the oauth2AuthorizeParams to the login params
func (o *LoginParams) SetOauth2AuthorizeParams(oauth2AuthorizeParams *models.OAuth2AuthorizeParams) {
	o.Oauth2AuthorizeParams = oauth2AuthorizeParams
}

// WithPassword adds the password to the login params
func (o *LoginParams) WithPassword(password string) *LoginParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the login params
func (o *LoginParams) SetPassword(password string) {
	o.Password = password
}

// WriteToRequest writes these params to a swagger request
func (o *LoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param name
	qrName := o.Name
	qName := qrName
	if qName != "" {
		if err := r.SetQueryParam("name", qName); err != nil {
			return err
		}
	}

	if o.Oauth2AuthorizeParams != nil {
		if err := r.SetBodyParam(o.Oauth2AuthorizeParams); err != nil {
			return err
		}
	}

	// query param password
	qrPassword := o.Password
	qPassword := qrPassword
	if qPassword != "" {
		if err := r.SetQueryParam("password", qPassword); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
