// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSmsLoginParams creates a new SmsLoginParams object
// with the default values initialized.
func NewSmsLoginParams() *SmsLoginParams {
	var ()
	return &SmsLoginParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSmsLoginParamsWithTimeout creates a new SmsLoginParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSmsLoginParamsWithTimeout(timeout time.Duration) *SmsLoginParams {
	var ()
	return &SmsLoginParams{

		timeout: timeout,
	}
}

// NewSmsLoginParamsWithContext creates a new SmsLoginParams object
// with the default values initialized, and the ability to set a context for a request
func NewSmsLoginParamsWithContext(ctx context.Context) *SmsLoginParams {
	var ()
	return &SmsLoginParams{

		Context: ctx,
	}
}

// NewSmsLoginParamsWithHTTPClient creates a new SmsLoginParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSmsLoginParamsWithHTTPClient(client *http.Client) *SmsLoginParams {
	var ()
	return &SmsLoginParams{
		HTTPClient: client,
	}
}

/*SmsLoginParams contains all the parameters to send to the API endpoint
for the sms login operation typically these are written to a http.Request
*/
type SmsLoginParams struct {

	/*Phone*/
	Phone string
	/*Scope*/
	Scope string
	/*SmsCode*/
	SmsCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the sms login params
func (o *SmsLoginParams) WithTimeout(timeout time.Duration) *SmsLoginParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sms login params
func (o *SmsLoginParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sms login params
func (o *SmsLoginParams) WithContext(ctx context.Context) *SmsLoginParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sms login params
func (o *SmsLoginParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sms login params
func (o *SmsLoginParams) WithHTTPClient(client *http.Client) *SmsLoginParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sms login params
func (o *SmsLoginParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPhone adds the phone to the sms login params
func (o *SmsLoginParams) WithPhone(phone string) *SmsLoginParams {
	o.SetPhone(phone)
	return o
}

// SetPhone adds the phone to the sms login params
func (o *SmsLoginParams) SetPhone(phone string) {
	o.Phone = phone
}

// WithScope adds the scope to the sms login params
func (o *SmsLoginParams) WithScope(scope string) *SmsLoginParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the sms login params
func (o *SmsLoginParams) SetScope(scope string) {
	o.Scope = scope
}

// WithSmsCode adds the smsCode to the sms login params
func (o *SmsLoginParams) WithSmsCode(smsCode string) *SmsLoginParams {
	o.SetSmsCode(smsCode)
	return o
}

// SetSmsCode adds the smsCode to the sms login params
func (o *SmsLoginParams) SetSmsCode(smsCode string) {
	o.SmsCode = smsCode
}

// WriteToRequest writes these params to a swagger request
func (o *SmsLoginParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param phone
	qrPhone := o.Phone
	qPhone := qrPhone
	if qPhone != "" {
		if err := r.SetQueryParam("phone", qPhone); err != nil {
			return err
		}
	}

	// query param scope
	qrScope := o.Scope
	qScope := qrScope
	if qScope != "" {
		if err := r.SetQueryParam("scope", qScope); err != nil {
			return err
		}
	}

	// query param smsCode
	qrSmsCode := o.SmsCode
	qSmsCode := qrSmsCode
	if qSmsCode != "" {
		if err := r.SetQueryParam("smsCode", qSmsCode); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
